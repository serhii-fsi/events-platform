/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authorization status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthStatusResponse"];
                    };
                };
                401: components["responses"]["ErrorUnauthorized"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of events */
        get: {
            parameters: {
                query?: {
                    page?: components["parameters"]["PageQuery"];
                    limit?: components["parameters"]["LimitQuery"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventsListResponse"];
                    };
                };
                400: components["responses"]["ErrorBadRequest"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        /** Create a new event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateEventRequest"];
                };
            };
            responses: {
                /** @description Event created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DetailedEventResponse"];
                    };
                };
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DetailedEventResponse"];
                    };
                };
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        /** Delete an event */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SuccessOk"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        options?: never;
        head?: never;
        /** Update event details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateEventRequest"];
                };
            };
            responses: {
                200: components["schemas"]["DetailedEventResponse"];
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/attendance-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's attendance status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendanceStatusResponse"];
                    };
                };
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's attendance status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAttendanceStatusRequest"];
                };
            };
            responses: {
                200: components["schemas"]["AttendanceStatusResponse"];
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/calendar-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's calendar status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CalendarStatusResponse"];
                    };
                };
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's calendar status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCalendarStatusRequest"];
                };
            };
            responses: {
                200: components["schemas"]["CalendarStatusResponse"];
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfileResponse"];
                    };
                };
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's profile */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileRequest"];
                };
            };
            responses: {
                200: components["schemas"]["UserProfileResponse"];
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search users */
        get: {
            parameters: {
                query?: {
                    search?: components["parameters"]["SearchQuery"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchUsersResponse"];
                    };
                };
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's role */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserRoleRequest"];
                };
            };
            responses: {
                200: components["schemas"]["UserProfileResponse"];
                400: components["responses"]["ErrorBadRequest"];
                401: components["responses"]["ErrorUnauthorized"];
                403: components["responses"]["ErrorForbidden"];
                404: components["responses"]["ErrorNotFound"];
                500: components["responses"]["ErrorInternal"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseEvent: {
            id: number;
            title: string;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            location: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        User: {
            id: number;
            name: string;
            /** Format: email */
            email: string;
            /** @enum {string} */
            role: "user" | "editor" | "admin";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        Pagination: {
            totalPages: number;
            currentPage: number;
        };
        DetailedEvent: {
            id: number;
            title: string;
            description: string;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            location: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        AttendanceStatus: {
            /** @enum {string|null} */
            status: "attending" | "declined" | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        CalendarStatus: {
            /** @enum {string|null} */
            status: "added" | "removed" | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        AuthStatusResponse: {
            data: {
                user: components["schemas"]["User"];
            };
        };
        EventsListResponse: {
            data: {
                events: components["schemas"]["BaseEvent"][];
            };
            meta: {
                pagination: components["schemas"]["Pagination"];
            };
        };
        CreateEventRequest: {
            title: string;
            description: string;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            location: string;
        };
        DetailedEventResponse: {
            data: {
                event: components["schemas"]["DetailedEvent"];
            };
        };
        UpdateEventRequest: {
            title?: string;
            description?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            location?: string;
        };
        AttendanceStatusResponse: {
            data: {
                attendanceStatus: components["schemas"]["AttendanceStatus"];
            };
        };
        UpdateAttendanceStatusRequest: {
            /** @enum {string|null} */
            attendanceStatus: "attending" | "declined" | null;
        };
        CalendarStatusResponse: {
            data: {
                calendarStatus: components["schemas"]["CalendarStatus"];
            };
        };
        UpdateCalendarStatusRequest: {
            /** @enum {string|null} */
            calendarStatus: "added" | "removed" | null;
        };
        UserProfileResponse: {
            data: {
                user: components["schemas"]["User"];
            };
        };
        UpdateUserProfileRequest: {
            name?: string;
        };
        SearchUsersResponse: {
            data: {
                users: components["schemas"]["User"][];
            };
        };
        UpdateUserRoleRequest: {
            /** @enum {string} */
            role: "user" | "editor" | "admin";
        };
    };
    responses: {
        /** @description Operation successful */
        SuccessOk: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 200;
                    /** @enum {boolean} */
                    success: true;
                };
            };
        };
        /** @description The request was successful, and a new resource was created. */
        SuccessCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 201;
                    /** @enum {boolean} */
                    success: true;
                };
            };
        };
        /** @description The request was successful, but there is no content to return. */
        SuccessNoContent: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 204;
                    /** @enum {boolean} */
                    success: true;
                };
            };
        };
        /** @description Unauthorized 401 - The client must authenticate itself to get the requested response. Client has not provided any authentication credentials, or the credentials provided are invalid. */
        ErrorUnauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 401;
                    error: string;
                };
            };
        };
        /** @description BadRequest 400 - The request was malformed or invalid. */
        ErrorBadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 400;
                    error: string;
                };
            };
        };
        /** @description ErrorForbidden 403 - The server understands the request but refuses to authorize it. Client is authenticated but does not have permission to access the requested resource. */
        ErrorForbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 403;
                    error: string;
                };
            };
        };
        /** @description Not Acceptable 406 - The server cannot produce a response matching the list of acceptable values defined in the request's proactive content negotiation headers. */
        ErrorNotAcceptable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 406;
                    error: string;
                };
            };
        };
        /** @description NotFound 404 - The resource was not found. */
        ErrorNotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 404;
                    error: string;
                };
            };
        };
        /** @description ErrorInternal 500 - An error occurred on the server. */
        ErrorInternal: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 500;
                    error: string;
                };
            };
        };
    };
    parameters: {
        PageQuery: number;
        LimitQuery: number;
        EventIdPath: number;
        UserIdPath: number;
        SearchQuery: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
