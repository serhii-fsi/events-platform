openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: 'http://localhost:3001'
    description: Local development server
paths:
  #================= /api/auth/status =================
  /api/auth/status:
    get:
      summary: Get authentication status
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthStatusResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/events =================
  # Endpoints: E2, E4
  /api/events:
    get:
      summary: Get list of events
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEventResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/events/{eventId} =================
  # Endpoints: E3, E5, E15
  /api/events/{eventId}:
    get:
      summary: Get event details
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEventResponse'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    patch:
      summary: Update event details
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          $ref: '#/components/schemas/DetailedEventResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    delete:
      summary: Delete an event
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOk'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/users/{userId}/events/{eventId}/attendance-status =================
  # Endpoints: E6, E7
  /api/users/{userId}/events/{eventId}/attendance-status:
    get:
      summary: Get user's attendance status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceStatusResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    patch:
      summary: Update user's attendance status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttendanceStatusRequest'
      responses:
        '200':
          $ref: '#/components/schemas/AttendanceStatusResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/users/{userId}/events/{eventId}/calendar-status =================
  # Endpoints: E11, E12
  /api/users/{userId}/events/{eventId}/calendar-status:
    get:
      summary: Get user's calendar status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarStatusResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    patch:
      summary: Update user's calendar status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCalendarStatusRequest'
      responses:
        '200':
          $ref: '#/components/schemas/CalendarStatusResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/users/{userId}/profile =================
  # Endpoints: E8, E9
  /api/users/{userId}/profile:
    get:
      summary: Get user's profile
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'
    patch:
      summary: Update user's profile
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/users =================
  # Endpoints: E10
  /api/users:
    get:
      summary: Search users
      parameters:
        - $ref: '#/components/parameters/SearchQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUsersResponse'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '500':
          $ref: '#/components/responses/ErrorInternal'

  #================= /api/users/{userId}/role =================
  # Endpoints: E14
  /api/users/{userId}/role:
    patch:
      summary: Update user's role
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleRequest'
      responses:
        '200':
          $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '401':
          $ref: '#/components/responses/ErrorUnauthorized'
        '403':
          $ref: '#/components/responses/ErrorForbidden'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternal'

#================= components =================
components:
  schemas:
    BaseEvent:
      type: object
      required: [id, title, startAt, endAt, location, createdAt, updatedAt]
      properties:
        id:
          type: integer
          minimum: 1
          maximum: 2147483647
        title:
          type: string
          minLength: 1
          maxLength: 100
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 100
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      required: [id, name, email, role, createdAt, updatedAt]
      properties:
        id:
          type: integer
          minimum: 1
          maximum: 2147483647
        name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 50
        role:
          type: string
          enum: [user, editor, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      required: [totalPages, currentPage]
      properties:
        totalPages:
          type: integer
          minimum: 1
          maximum: 2147483647
        currentPage:
          type: integer
          minimum: 1
          maximum: 2147483647

    DetailedEvent:
      type: object
      required:
        [id, title, description, startAt, endAt, location, createdAt, updatedAt]
      properties:
        id:
          type: integer
          minimum: 1
          maximum: 2147483647
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 100
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AttendanceStatus:
      type: object
      required: [status, createdAt, updatedAt]
      properties:
        status:
          type: string
          nullable: true
          enum: [attending, declined]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CalendarStatus:
      type: object
      required: [status, createdAt, updatedAt]
      properties:
        status:
          type: string
          nullable: true
          enum: [added, removed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [user]
          properties:
            user:
              $ref: '#/components/schemas/User'

    EventsListResponse:
      type: object
      required: [data, meta]
      properties:
        data:
          type: object
          required: [events]
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/BaseEvent'
        meta:
          type: object
          required: [pagination]
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'

    CreateEventRequest:
      type: object
      required: [title, description, startAt, endAt, location]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 100

    DetailedEventResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [event]
          properties:
            event:
              $ref: '#/components/schemas/DetailedEvent'

    UpdateEventRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 100

    AttendanceStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [attendanceStatus]
          properties:
            attendanceStatus:
              $ref: '#/components/schemas/AttendanceStatus'

    UpdateAttendanceStatusRequest:
      type: object
      required: [attendanceStatus]
      properties:
        attendanceStatus:
          type: string
          nullable: true
          enum: [attending, declined]

    CalendarStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [calendarStatus]
          properties:
            calendarStatus:
              $ref: '#/components/schemas/CalendarStatus'

    UpdateCalendarStatusRequest:
      type: object
      required: [calendarStatus]
      properties:
        calendarStatus:
          type: string
          nullable: true
          enum: [added, removed]

    UserProfileResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [user]
          properties:
            user:
              $ref: '#/components/schemas/User'

    UpdateUserProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50

    SearchUsersResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [users]
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    UpdateUserRoleRequest:
      type: object
      required: [role]
      properties:
        role:
          type: string
          enum: [user, editor, admin]

  parameters:
    AuthorizationHeader:
      in: header
      name: Authorization
      required: true
      schema:
        type: string
        minLength: 10
        maxLength: 100

    PageQuery:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647
        default: 1

    LimitQuery:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    EventIdPath:
      in: path
      name: eventId
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647

    UserIdPath:
      in: path
      name: userId
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647

    SearchQuery:
      in: query
      name: search
      schema:
        type: string
        minLength: 1
        maxLength: 50

  responses:
    SuccessOk:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            required: [status, success]
            properties:
              status:
                type: integer
                enum: [200]
              success:
                type: boolean
                enum: [true]

    SuccessCreated:
      description: The request was successful, and a new resource was created.
      content:
        application/json:
          schema:
            type: object
            required: [status, success]
            properties:
              status:
                type: integer
                enum: [201]
              success:
                type: boolean
                enum: [true]

    SuccessNoContent:
      description: The request was successful, but there is no content to return.
      content:
        application/json:
          schema:
            type: object
            required: [status, success]
            properties:
              status:
                type: integer
                enum: [204]
              success:
                type: boolean
                enum: [true]

    ErrorUnauthorized:
      description: Unauthorized 401 - The client must authenticate itself to get the requested response. Client has not provided any authentication credentials, or the credentials provided are invalid.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [401]
              error:
                type: string
                minLength: 1
                maxLength: 1000

    ErrorBadRequest:
      description: BadRequest 400 - The request was malformed or invalid.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [400]
              error:
                type: string
                minLength: 1
                maxLength: 1000

    ErrorForbidden:
      description: ErrorForbidden 403 - The server understands the request but refuses to authorize it. Client is authenticated but does not have permission to access the requested resource.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [403]
              error:
                type: string
                minLength: 1
                maxLength: 1000

    ErrorNotAcceptable:
      description: Not Acceptable 406 - The server cannot produce a response matching the list of acceptable values defined in the request's proactive content negotiation headers.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [406]
              error:
                type: string
                minLength: 1
                maxLength: 1000

    ErrorNotFound:
      description: NotFound 404 - The resource was not found.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [404]
              error:
                type: string
                minLength: 1
                maxLength: 1000

    ErrorInternal:
      description: ErrorInternal 500 - An error occurred on the server.
      content:
        application/json:
          schema:
            type: object
            required: [status, error]
            properties:
              status:
                type: integer
                enum: [500]
              error:
                type: string
                minLength: 1
                maxLength: 1000
