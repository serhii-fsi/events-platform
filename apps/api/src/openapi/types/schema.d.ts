/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authentication status */
        get: {
            parameters: {
                query?: never;
                header: {
                    Authorization: components["parameters"]["AuthorizationHeader"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthStatusResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of events */
        get: {
            parameters: {
                query?: {
                    page?: components["parameters"]["PageQuery"];
                    limit?: components["parameters"]["LimitQuery"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventsListResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /** Create a new event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateEventRequest"];
                };
            };
            responses: {
                /** @description Event created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateEventResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventDetailsResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        /** Delete an event */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        /** Update event details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateEventRequest"];
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/attendance-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's attendance status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendanceStatusResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's attendance status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAttendanceStatusRequest"];
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/calendar-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's calendar status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CalendarStatusResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's calendar status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                    eventId: components["parameters"]["EventIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCalendarStatusRequest"];
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfileResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's profile */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileRequest"];
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search users */
        get: {
            parameters: {
                query?: {
                    search?: components["parameters"]["SearchQuery"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchUsersResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's role */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: components["parameters"]["UserIdPath"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserRoleRequest"];
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthStatusResponse: {
            data: {
                user: {
                    id: number;
                    /** @enum {string} */
                    role: "user" | "editor" | "admin";
                    name: string;
                };
            };
        };
        EventsListResponse: {
            data: {
                events: {
                    id: number;
                    title: string;
                    /** Format: date-time */
                    startAt: string;
                    /** Format: date-time */
                    endAt: string;
                    location: string;
                }[];
            };
            meta: {
                pagination: {
                    totalPages: number;
                    currentPage: number;
                };
            };
        };
        CreateEventRequest: {
            title: string;
            description: string;
            /** Format: date-time */
            startAt: string;
            /** Format: date-time */
            endAt: string;
            location: string;
        };
        CreateEventResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                event: {
                    id: number;
                };
            };
        };
        EventDetailsResponse: {
            data: {
                event: {
                    title: string;
                    description: string;
                    /** Format: date-time */
                    startAt: string;
                    /** Format: date-time */
                    endAt: string;
                    location: string;
                };
            };
        };
        UpdateEventRequest: {
            title?: string;
            description?: string;
            /** Format: date-time */
            startAt?: string;
            /** Format: date-time */
            endAt?: string;
            location?: string;
        };
        AttendanceStatusResponse: {
            data: {
                attendance: {
                    /** @enum {string|null} */
                    status: "attending" | "declined" | null;
                };
            };
        };
        UpdateAttendanceStatusRequest: {
            /** @enum {string|null} */
            status: "attending" | "declined" | null;
        };
        CalendarStatusResponse: {
            data: {
                calendar: {
                    /** @enum {string|null} */
                    status: "added" | "removed" | null;
                };
            };
        };
        UpdateCalendarStatusRequest: {
            /** @enum {string|null} */
            status: "added" | "removed" | null;
        };
        UserProfileResponse: {
            data: {
                profile: {
                    name: string;
                    /** Format: email */
                    email: string;
                };
            };
        };
        UpdateUserProfileRequest: {
            name?: string;
        };
        SearchUsersResponse: {
            data: {
                users: {
                    id: number;
                    name: string;
                    /** Format: email */
                    email: string;
                    /** @enum {string} */
                    role: "user" | "editor" | "admin";
                }[];
            };
        };
        UpdateUserRoleRequest: {
            /** @enum {string} */
            role: "user" | "editor" | "admin";
        };
    };
    responses: {
        /** @description Operation successful */
        Success: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {boolean} */
                    success: true;
                };
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Unauthorized */
                    error: string;
                };
            };
        };
        /** @description Bad Request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Bad Request */
                    error: string;
                };
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Not Found */
                    error: string;
                };
            };
        };
        /** @description Internal Server Error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Internal Server Error */
                    error: string;
                };
            };
        };
    };
    parameters: {
        AuthorizationHeader: string;
        PageQuery: number;
        LimitQuery: number;
        EventIdPath: number;
        UserIdPath: number;
        SearchQuery: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
