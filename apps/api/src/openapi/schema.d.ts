/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authentication status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                user: {
                                    id: number;
                                    /** @enum {string} */
                                    role: "user" | "editor" | "admin";
                                    name: string;
                                };
                            };
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of events */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                events: {
                                    id: number;
                                    title: string;
                                    /** Format: date-time */
                                    startAt: string;
                                    /** Format: date-time */
                                    endAt: string;
                                    location: string;
                                }[];
                            };
                            meta: {
                                pagination: {
                                    totalPages: number;
                                    currentPage: number;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        /** Create a new event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title: string;
                        description: string;
                        /** Format: date-time */
                        startAt: string;
                        /** Format: date-time */
                        endAt: string;
                        location: string;
                    };
                };
            };
            responses: {
                /** @description Event created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                event: {
                                    id: number;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                event: {
                                    title: string;
                                    description: string;
                                    /** Format: date-time */
                                    startAt: string;
                                    /** Format: date-time */
                                    endAt: string;
                                    location: string;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        /** Delete an event */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        options?: never;
        head?: never;
        /** Update event details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title?: string;
                        description?: string;
                        /** Format: date-time */
                        startAt?: string;
                        /** Format: date-time */
                        endAt?: string;
                        location?: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/attendance-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's attendance status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                attendance: {
                                    /** @enum {string|null} */
                                    status: "attending" | "declined" | null;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's attendance status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string|null} */
                        status: "attending" | "declined" | null;
                    };
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/events/{eventId}/calendar-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's calendar status for an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                calendar: {
                                    /** @enum {string|null} */
                                    status: "added" | "removed" | null;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's calendar status for an event */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                    eventId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string|null} */
                        status: "added" | "removed" | null;
                    };
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users/{userId}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                profile: {
                                    name: string;
                                    /** Format: email */
                                    email: string;
                                };
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's profile */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                    };
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search users */
        get: {
            parameters: {
                query?: {
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                users: {
                                    id: number;
                                    name: string;
                                    /** Format: email */
                                    email: string;
                                    /** @enum {string} */
                                    role: "user" | "editor" | "admin";
                                }[];
                            };
                        };
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update user's role */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        role: "user" | "editor" | "admin";
                    };
                };
            };
            responses: {
                200: components["responses"]["Success"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: {
        /** @description Operation successful */
        Success: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {boolean} */
                    success: true;
                };
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Unauthorized */
                    error: string;
                };
            };
        };
        /** @description Bad Request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Bad Request */
                    error: string;
                };
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Not Found */
                    error: string;
                };
            };
        };
        /** @description Internal Server Error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example Internal Server Error */
                    error: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
