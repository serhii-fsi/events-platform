openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: 'http://localhost:3001'
    description: Local development server
paths:
  #================= /api/auth/status =================
  /api/auth/status:
    get:
      summary: Get authentication status
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthStatusResponse'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/events =================
  # Endpoints: E2, E4
  /api/events:
    get:
      summary: Get list of events
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/events/{eventId} =================
  # Endpoints: E3, E5, E15
  /api/events/{eventId}:
    get:
      summary: Get event details
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetailsResponse'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    patch:
      summary: Update event details
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete an event
      parameters:
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/users/{userId}/events/{eventId}/attendance-status =================
  # Endpoints: E6, E7
  /api/users/{userId}/events/{eventId}/attendance-status:
    get:
      summary: Get user's attendance status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceStatusResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    patch:
      summary: Update user's attendance status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttendanceStatusRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/users/{userId}/events/{eventId}/calendar-status =================
  # Endpoints: E11, E12
  /api/users/{userId}/events/{eventId}/calendar-status:
    get:
      summary: Get user's calendar status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarStatusResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    patch:
      summary: Update user's calendar status for an event
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
        - $ref: '#/components/parameters/EventIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCalendarStatusRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/users/{userId}/profile =================
  # Endpoints: E8, E9
  /api/users/{userId}/profile:
    get:
      summary: Get user's profile
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    patch:
      summary: Update user's profile
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/users =================
  # Endpoints: E10
  /api/users:
    get:
      summary: Search users
      parameters:
        - $ref: '#/components/parameters/SearchQuery'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUsersResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

  #================= /api/users/{userId}/role =================
  # Endpoints: E14
  /api/users/{userId}/role:
    patch:
      summary: Update user's role
      parameters:
        - $ref: '#/components/parameters/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'

#================= components =================
components:
  schemas:
    AuthStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [user]
          properties:
            user:
              type: object
              required: [id, role, name]
              properties:
                id:
                  type: integer
                  minimum: 1
                  maximum: 2147483647
                role:
                  type: string
                  enum: [user, editor, admin]
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
    EventsListResponse:
      type: object
      required: [data, meta]
      properties:
        data:
          type: object
          required: [events]
          properties:
            events:
              type: array
              items:
                type: object
                required: [id, title, startAt, endAt, location]
                properties:
                  id:
                    type: integer
                    minimum: 1
                    maximum: 2147483647
                  title:
                    type: string
                    minLength: 1
                    maxLength: 100
                  startAt:
                    type: string
                    format: date-time
                  endAt:
                    type: string
                    format: date-time
                  location:
                    type: string
                    minLength: 0
                    maxLength: 100
        meta:
          type: object
          required: [pagination]
          properties:
            pagination:
              type: object
              required: [totalPages, currentPage]
              properties:
                totalPages:
                  type: integer
                  minimum: 1
                  maximum: 2147483647
                currentPage:
                  type: integer
                  minimum: 1
                  maximum: 2147483647
    CreateEventRequest:
      type: object
      required: [title, description, startAt, endAt, location]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 0
          maxLength: 100
    CreateEventResponse:
      type: object
      required: [success, data]
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          required: [event]
          properties:
            event:
              type: object
              required: [id]
              properties:
                id:
                  type: integer
                  minimum: 1
                  maximum: 2147483647
    EventDetailsResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [event]
          properties:
            event:
              type: object
              required: [title, description, startAt, endAt, location]
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  minLength: 1
                  maxLength: 1000
                startAt:
                  type: string
                  format: date-time
                endAt:
                  type: string
                  format: date-time
                location:
                  type: string
                  minLength: 0
                  maxLength: 100
    UpdateEventRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          minLength: 1
          maxLength: 1000
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        location:
          type: string
          minLength: 0
          maxLength: 100
    AttendanceStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [attendance]
          properties:
            attendance:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  nullable: true
                  enum: [attending, declined]
    UpdateAttendanceStatusRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string
          nullable: true
          enum: [attending, declined]
    CalendarStatusResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [calendar]
          properties:
            calendar:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  nullable: true
                  enum: [added, removed]
    UpdateCalendarStatusRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string
          nullable: true
          enum: [added, removed]
    UserProfileResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [profile]
          properties:
            profile:
              type: object
              required: [name, email]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                email:
                  type: string
                  format: email
                  minLength: 5
                  maxLength: 50
    UpdateUserProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
    SearchUsersResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [users]
          properties:
            users:
              type: array
              items:
                type: object
                required: [id, name, email, role]
                properties:
                  id:
                    type: integer
                    minimum: 1
                    maximum: 2147483647
                  name:
                    type: string
                    minLength: 1
                    maxLength: 50
                  email:
                    type: string
                    format: email
                    minLength: 5
                    maxLength: 50
                  role:
                    type: string
                    enum: [user, editor, admin]
    UpdateUserRoleRequest:
      type: object
      required: [role]
      properties:
        role:
          type: string
          enum: [user, editor, admin]
  parameters:
    AuthorizationHeader:
      in: header
      name: Authorization
      required: true
      schema:
        type: string
        minLength: 10
        maxLength: 100
    PageQuery:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647
        default: 1
    LimitQuery:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    EventIdPath:
      in: path
      name: eventId
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647
    UserIdPath:
      in: path
      name: userId
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 2147483647
    SearchQuery:
      in: query
      name: search
      schema:
        type: string
        minLength: 1
        maxLength: 50
  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                enum: [true]
    Error:
      description: Unauthorized 401, BadRequest 400, NotFound 404, InternalError 500
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: NotFound
